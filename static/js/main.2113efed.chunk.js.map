{"version":3,"sources":["lib/firebase.js","components/add-new-post.js","components/navbar.js","components/vote-buttons.js","components/Delete.js","components/post.js","app.js","index.js"],"names":["db","firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","AddNewPost","useDisclosure","isOpen","onOpen","onClose","useState","title","setTitle","posts","setposts","isSaving","setSaving","handleSubmit","a","date","Date","collection","add","upVotesCount","downVotesCount","createdAt","toUTCString","updatedAt","onClick","colorScheme","isCentered","id","bg","p","rounded","w","type","value","onChange","e","target","spacing","disabled","trim","isLoading","Navbar","position","top","zIndex","maxW","centerContent","justifyContent","VoteButtons","post","isVoting","setVoting","votedPosts","setVotedPosts","useEffect","votesFromLocalStorage","localStorage","getItem","previousVotes","JSON","parse","error","console","handleDisablingOfVoting","postId","push","setItem","stringify","handleClick","doc","set","checkIfPostIsAlreadyVoted","indexOf","size","aria-label","icon","isDisabled","DeletePost","delete","Post","key","alignItems","Delete","App","setPosts","setLoading","orderBy","get","then","querySnapshot","data","docs","map","onSnapshot","_posts","forEach","minH","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2113efed.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,\n};\n\nconst initFirebase = firebase.initializeApp(firebaseConfig);\nconst db = initFirebase.firestore();\n\nexport default db;","import {\n  Button,\n  FormControl,\n  FormLabel,\n  Textarea,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  HStack,\n  useDisclosure,\n} from \"@chakra-ui/core\";\nimport React, { useState } from \"react\";\nimport db from \"../lib/firebase\";\n\nconst AddNewPost = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [title, setTitle] = useState(\"\");\n  const [posts, setposts] = useState(\"\");\n  const [isSaving, setSaving] = useState(false);\n\n  const handleSubmit = async () => {\n    setSaving(true);\n\n    const date = new Date();\n\n    await db.collection(\"posts\").add({\n      title,\n      posts,\n      upVotesCount: 0,\n      downVotesCount: 0,\n      createdAt: date.toUTCString(),\n      updatedAt: date.toUTCString(),\n    });\n\n    onClose();\n    setTitle(\"\");\n    setSaving(false);\n  };\n\n  return (\n    <>\n      <Button onClick={onOpen} colorScheme=\"blue\" >\n        Add new post\n      </Button>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay>\n          <ModalContent>\n            <ModalHeader>Add new post</ModalHeader>\n            <ModalCloseButton />\n\n            <ModalBody>\n              <FormControl id=\"post-posts\">\n                <FormLabel bg=\"gray.100\" p={4} rounded=\"md\" w=\"100%\">Post Heading</FormLabel>\n                <Textarea\n                  type=\"post-posts\"\n                  value={posts}\n                  onChange={(e) => setposts(e.target.value)}\n                />\n              </FormControl>\n            </ModalBody>\n\n            <ModalBody>\n              <FormControl id=\"post-title\">\n                <FormLabel>Post title</FormLabel>\n                <Textarea\n                  type=\"post-title\"\n                  value={title}\n                  onChange={(e) => setTitle(e.target.value)}\n                />\n              </FormControl>\n            </ModalBody>\n\n            <ModalFooter>\n              <HStack spacing={4}>\n                <Button onClick={onClose}>Close</Button>\n                <Button\n                  onClick={handleSubmit}\n                  colorScheme=\"blue\"\n                  disabled={!title.trim()}\n                  isLoading={isSaving}\n                >\n                  Save\n                </Button>\n              </HStack>\n            </ModalFooter>\n          </ModalContent>\n        </ModalOverlay>\n      </Modal>\n\n      \n    </>\n  );\n};\n\nexport default AddNewPost;\n","import { Box, Container, Flex } from \"@chakra-ui/core\";\nimport React from \"react\";\nimport AddNewPost from \"./add-new-post\";\n\nconst Navbar = () => {\n  return (\n    <Box position=\"sticky\" top={0} p={4} bg=\"gray.100\" zIndex={1}>\n      <Container maxW=\"md\" centerContent>\n        <Flex justifyContent=\"flex-end\" w=\"100%\" position=\"sticky\" top={0}>\n          <AddNewPost />\n        </Flex>\n      </Container>\n      <Container maxW=\"md\" centerContent>\n  \n      </Container>\n    </Box>\n    \n  );\n};\n\nexport default Navbar;\n","import { IconButton, Text, VStack } from \"@chakra-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { FiArrowDown, FiArrowUp } from \"react-icons/fi\";\nimport db from \"../lib/firebase\";\n\nconst VoteButtons = ({ post }) => {\n  const [isVoting, setVoting] = useState(false);\n  const [votedPosts, setVotedPosts] = useState([]);\n\n  useEffect(() => {\n    const votesFromLocalStorage = localStorage.getItem(\"votes\") || [];\n    let previousVotes = [];\n\n    try {\n      previousVotes = JSON.parse(votesFromLocalStorage);\n    } catch (error) {\n      console.error(error);\n    }\n\n    setVotedPosts(previousVotes);\n  }, []);\n\n  const handleDisablingOfVoting = (postId) => {\n    const previousVotes = votedPosts;\n    previousVotes.push(postId);\n\n    setVotedPosts(previousVotes);\n\n    localStorage.setItem(\"votes\", JSON.stringify(votedPosts));\n  };\n\n  const handleClick = async (type) => {\n    setVoting(true);\n\n    let upVotesCount = post.upVotesCount;\n    let downVotesCount = post.downVotesCount;\n\n    const date = new Date();\n\n    if (type === \"upvote\") {\n      upVotesCount = upVotesCount + 1;\n    } else {\n      downVotesCount = downVotesCount + 1;\n    }\n\n    await db.collection(\"posts\").doc(post.id).set({\n      title: post.title,\n      upVotesCount,\n      downVotesCount,\n      createdAt: post.createdAt,\n      updatedAt: date.toUTCString(),\n    });\n    handleDisablingOfVoting(post.id);\n\n    setVoting(false);\n  };\n\n  const checkIfPostIsAlreadyVoted = () => {\n    if (votedPosts.indexOf(post.id) > -1) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  return (\n    <>\n      <VStack>\n        <IconButton\n          size=\"lg\"\n          colorScheme=\"green\"\n          aria-label=\"Upvote\"\n          icon={<FiArrowUp />}\n          onClick={() => handleClick(\"upvote\")}\n          isLoading={isVoting}\n          isDisabled={checkIfPostIsAlreadyVoted()}\n        />\n        <Text bg=\"gray.100\" rounded=\"md\" w=\"100%\" p={1}>\n          {post.upVotesCount}\n        </Text>\n      </VStack>\n      <VStack>\n        <IconButton\n          size=\"lg\"\n          colorScheme=\"blue\"\n          aria-label=\"Downvote\"\n          icon={<FiArrowDown />}\n          onClick={() => handleClick(\"downvote\")}\n          isLoading={isVoting}\n          isDisabled={checkIfPostIsAlreadyVoted()}\n        />\n        <Text bg=\"gray.100\" rounded=\"md\" w=\"100%\" p={1}>\n          {post.downVotesCount}\n        </Text>\n      </VStack>\n    </>\n  );\n};\n\nexport default VoteButtons;","import { IconButton, VStack } from \"@chakra-ui/core\";\r\nimport React, {} from \"react\";\r\nimport {FiDelete } from \"react-icons/fi\";\r\nimport db from \"../lib/firebase\";\r\n\r\nconst DeletePost = ({ post }) => {\r\n\r\nconst DeletePost = () => {\r\n  db.collection(\"posts\").doc(post.id).delete();\r\n};\r\nreturn (\r\n  <>\r\n    <VStack>\r\n      <IconButton\r\n        size=\"lg\"\r\n        colorScheme=\"red\"\r\n        icon={<FiDelete/>}\r\n        onClick={() => DeletePost(\"Delete\")}\r\n      />\r\n    </VStack>\r\n  </>\r\n);\r\n};\r\n\r\nexport default DeletePost;","import { Box, HStack, Text } from \"@chakra-ui/core\";\nimport React from \"react\";\nimport VoteButtons from \"./vote-buttons\";\nimport DeletePost from \"./Delete\"\n\nconst Post = ({ post }) => {\n  return (\n    <HStack key={post.id} w=\"100%\" alignItems=\"flex-start\">\n      <VoteButtons post={post} />\n      <Box bg=\"gray.100\" p={4} rounded=\"md\" w=\"100%\">\n        <Text>{post.posts}</Text>\n        <Text>{post.title}</Text>\n      </Box>\n      <DeletePost post={post} />\n    </HStack>\n  );\n};\n\nexport default Post;\n","import { Container, Flex, Spinner, VStack } from \"@chakra-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport Navbar from \"./components/navbar\";\nimport Post from \"./components/post\";\nimport db from \"./lib/firebase\";\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [isLoading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Hook to handle the initial fetching of posts\n\n    db.collection(\"posts\")\n      .orderBy(\"createdAt\", \"desc\")\n      .get()\n      .then((querySnapshot) => {\n        const data = querySnapshot.docs.map((doc) => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n\n        setPosts(data);\n        setLoading(false);\n      });\n  }, []);\n\n  useEffect(() => {\n    db.collection(\"posts\")\n      .orderBy(\"createdAt\", \"desc\")\n      .onSnapshot((querySnapshot) => {\n        const _posts = [];\n\n        querySnapshot.forEach((doc) => {\n          _posts.push({\n            id: doc.id,\n            ...doc.data(),\n          });\n        });\n\n        setPosts(_posts);\n      });\n  }, []);\n\n  if (isLoading) {\n    return (\n      <Flex minH=\"100vh\" justifyContent=\"center\" alignItems=\"center\">\n        <Spinner />\n      </Flex>\n    );\n  }\n\n  return (\n    <>\n      <Navbar />\n      <Container maxW=\"md\" centerContent p={8}>\n        <VStack spacing={8} w=\"100%\">\n          {posts.map((post) => (\n            <Post post={post} key={post.id} />\n          ))}\n        </VStack>\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","import { ChakraProvider } from \"@chakra-ui/core\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}